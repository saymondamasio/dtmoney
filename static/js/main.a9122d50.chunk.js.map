{"version":3,"sources":["assets/income.svg","assets/outcome.svg","assets/total.svg","services/api.ts","hooks/useTransactions.tsx","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","components/NewTransactionModal/styles.ts","assets/close.svg","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","created_at","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","summary","reduce","acc","type","incomes","amount","total","outcomes","src","income","alt","Intl","NumberFormat","style","currency","format","outcome","className","TransactionsTable","map","title","category","DateTimeFormat","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logo","onClick","colors","green","red","form","TransactionTypeContainer","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setType","setTitle","setAmount","setCategory","handleCreateNewTransaction","event","preventDefault","overlayClassName","close","onSubmit","placeholder","onChange","e","target","Number","GlobalStyle","createGlobalStyle","ReactModal","setAppElement","App","isOpenNewTransactionModal","setIsOpenNewTransactionModal","createServer","models","Model","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9122d50.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import axios from 'axios';\n\nexport const api = axios.create({\n  baseURL: 'http://localhost:3000/api',\n});\n","import {\n  createContext, ReactNode, useContext, useEffect, useState,\n} from 'react';\nimport { api } from '../services/api';\n\ninterface Transaction {\n  id: number;\n  title: string;\n  amount: number;\n  type: 'deposit' | 'withdraw';\n  category: string;\n  created_at: string;\n}\n\ntype CreateTransaction = Omit<Transaction, 'id' | 'created_at'>\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface TransactionsContextData {\n  transactions: Transaction[];\n  createTransaction: (transaction: CreateTransaction) => Promise<void>;\n}\n\nconst TransactionsContext = createContext<TransactionsContextData>({} as TransactionsContextData);\n\nfunction TransactionsProvider({ children }: Props) {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n  useEffect(() => {\n    api.get('/transactions').then((response) => setTransactions(response.data.transactions));\n  }, []);\n\n  async function createTransaction(transactionInput: CreateTransaction) {\n    const response = await api.post('transactions', {\n      ...transactionInput,\n      created_at: new Date(),\n    });\n\n    const { transaction } = response.data;\n\n    setTransactions([...transactions, transaction]);\n  }\n\n  return (\n    // eslint-disable-next-line react/jsx-no-constructed-context-values\n    <TransactionsContext.Provider value={{ transactions, createTransaction }}>\n      {children}\n    </TransactionsContext.Provider>\n  );\n}\n\nfunction useTransactions() {\n  const context = useContext(TransactionsContext);\n\n  return context;\n}\n\nexport {\n  useTransactions,\n  TransactionsProvider,\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 2rem;\n  margin-top: -10rem;\n\n  div {\n    background-color: var(--shape);\n    padding: 1.5rem 2rem;\n    border-radius: 0.25rem;\n\n    color: var(--text-title);\n\n    header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between; \n    }\n\n    strong {\n      margin-top: 1rem;\n      \n      display: block;\n\n      font-size: 2rem;\n      font-weight: 500;\n      line-height: 3rem;\n    }\n\n    &.highlight-background {\n      background-color: var(--green);\n      color: var(--shape);\n    }\n  }\n`;\n","import income from '../../assets/income.svg';\nimport outcome from '../../assets/outcome.svg';\nimport total from '../../assets/total.svg';\nimport { useTransactions } from '../../hooks/useTransactions';\nimport { Container } from './styles';\n\nexport function Summary() {\n  const { transactions } = useTransactions();\n\n  const summary = transactions.reduce((acc, transaction) => {\n    if (transaction.type === 'deposit') {\n      acc.incomes += transaction.amount;\n      acc.total += transaction.amount;\n    } else if (transaction.type === 'withdraw') {\n      acc.outcomes -= transaction.amount;\n      acc.total -= transaction.amount;\n    }\n\n    return acc;\n  }, {\n    total: 0,\n    incomes: 0,\n    outcomes: 0,\n  });\n\n  return (\n    <Container>\n      <div>\n        <header>\n          <p>Entradas</p>\n          <img src={income} alt=\"Entradas\" />\n        </header>\n\n        <strong>\n          {Intl.NumberFormat('pt-BR', {\n            style: 'currency',\n            currency: 'BRL',\n          }).format(summary.incomes)}\n        </strong>\n      </div>\n\n      <div>\n        <header>\n          <p>Saídas</p>\n          <img src={outcome} alt=\"Saídas\" />\n        </header>\n\n        <strong>\n          {Intl.NumberFormat('pt-BR', {\n            style: 'currency',\n            currency: 'BRL',\n          }).format(summary.outcomes)}\n        </strong>\n      </div>\n\n      <div className=\"highlight-background\">\n        <header>\n          <p>Total</p>\n          <img src={total} alt=\"Total\" />\n        </header>\n\n        <strong>\n          {Intl.NumberFormat('pt-BR', {\n            style: 'currency',\n            currency: 'BRL',\n          }).format(summary.total)}\n        </strong>\n      </div>\n    </Container>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin-top: 4rem;\n\n  table {\n    width: 100%;\n    border-spacing: 0 0.5rem;\n\n    th {\n      color: var(--text-body);\n      font-weight: 400;\n      padding: 1rem 2rem;\n      text-align: left;\n      line-height: 1.5rem;\n    }\n\n    td {\n      padding: 1rem 2rem;\n      border: 0;\n      background-color: var(--shape);\n\n      color: var(--text-body);\n      \n      &:first-child {\n        color: var(--text-title);\n\n        border-radius: 0.25rem 0 0 0.25rem;\n      }\n  \n      &:last-child {\n        border-radius: 0 0.25rem 0.25rem 0;\n      }\n\n      &.deposit {\n        color: var(--green);\n      }\n\n      &.withdraw {\n        color: var(--red);\n      }\n    }\n\n    \n  }\n`;\n","import { useTransactions } from '../../hooks/useTransactions';\nimport { Container } from './styles';\n\nexport function TransactionsTable() {\n  const { transactions } = useTransactions();\n\n  return (\n    <Container>\n      <table>\n        <thead>\n          <tr>\n            <th>Titulo</th>\n            <th>Valor</th>\n            <th>Categoria</th>\n            <th>Data</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n           transactions.map((transaction) => (\n             <tr key={transaction.id}>\n               <td>{transaction.title}</td>\n               <td className={transaction.type}>\n                 {\n                  Intl.NumberFormat('pt-BR', {\n                    style: 'currency',\n                    currency: 'BRL',\n                  }).format(transaction.amount)\n                 }\n               </td>\n               <td>{transaction.category}</td>\n               <td>\n                 {\n                  Intl.DateTimeFormat('pt-BR').format(new Date(transaction.created_at))\n                 }\n               </td>\n             </tr>\n           ))\n         }\n        </tbody>\n      </table>\n    </Container>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.main`\n  max-width: 1120px;\n  margin: 0 auto;\n  padding: 2.5rem 1rem;\n`;\n","import { Summary } from '../Summary';\nimport { TransactionsTable } from '../TransactionsTable';\nimport { Container } from './styles';\n\nexport function Dashboard() {\n  return (\n    <Container>\n      <Summary />\n      <TransactionsTable />\n    </Container>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components';\n\nexport const Container = styled.header`\n    background-color: var(--blue);\n\n    \n`;\n\nexport const Content = styled.div`\n    width: 1120px;\n    margin: 0 auto;\n    padding: 2rem 1rem 12rem;\n\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    button {\n        height: 3rem;\n        padding: 0 2rem;\n        \n        border: 0;\n        border-radius: 0.25rem;\n\n        background-color: var(--blue-light);\n        \n        font-size: 1rem;\n        color: #fff;\n        \n\n        transition: filter 0.2s;\n\n        &:hover {\n            filter: brightness(0.9);\n        }\n    }\n`;\n","import logo from '../../assets/logo.svg';\n\nimport { Container, Content } from './styles';\n\ninterface Props {\n  onOpenNewTransactionModal: () => void;\n}\n\nexport function Header({ onOpenNewTransactionModal }:Props) {\n  return (\n    <Container>\n      <Content>\n        <img src={logo} alt=\"dt money\" />\n        <button type=\"button\" onClick={onOpenNewTransactionModal}>\n          Nova transação\n        </button>\n      </Content>\n    </Container>\n  );\n}\n","import { darken, transparentize } from 'polished';\nimport styled from 'styled-components';\n\nconst colors = {\n  green: '#33cc95',\n  red: '#e52e42',\n};\n\ninterface RadioBoxProps {\n  isActive: boolean;\n  activeColor: keyof typeof colors\n}\n\nexport const Container = styled.form`\n    h2 {\n      color: var(--text-title);\n      font-size: 1.5rem;\n      margin-bottom: 2rem;\n    }\n\n    input {\n      width: 100%;\n      height: 4rem;\n      \n      padding: 0 1.5rem;\n      border-radius: 0.25rem;\n      border: 1px solid #d7d7d7;\n\n      background-color: #e7e9ee;\n\n      font-weight: 400;\n      font-size: 1rem;\n\n      &::placeholder {\n        color: var(--text-body)\n      }\n\n      & + input {\n        margin-top: 1rem;\n      }\n    }\n\n    button[type=\"submit\"] {\n      width: 100%;\n      height: 4rem;\n      background-color: var(--green);\n      \n      margin-top: 1.5rem;\n      padding: 0 1.5rem;\n      border-radius: 0.25rem;\n      border: 0;\n\n      color: #fff;\n      font-size: 1rem;\n      font-weight: 600;\n\n      transition: filter 0.2s;\n\n      &:hover {\n        filter: brightness(0.9)\n      }\n    }\n`;\n\nexport const TransactionTypeContainer = styled.div`\n  margin: 1rem 0;\n\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.5rem;\n`;\n\nexport const RadioBox = styled.button<RadioBoxProps>`\n  height: 4rem;\n\n  border: 1px solid #d7d7d7;\n  border-radius: 0.25rem;\n  \n  background-color: ${(props) => (props.isActive ? transparentize(0.9, colors[props.activeColor]) : 'transparent')};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transition: border-color 0.2s;\n\n  &:hover{\n    border-color: ${darken(0.1, '#d7d7d7')};\n  }\n\n  img {\n    width: 20px;\n    height: 20px;\n  }\n\n  span {\n    display: inline-block;\n    margin-left: 1rem;\n    \n    font-size: 1rem;\n    color: var(--text-title);\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import ReactModal from 'react-modal';\nimport { FormEvent, useState } from 'react';\nimport { Container, RadioBox, TransactionTypeContainer } from './styles';\nimport close from '../../assets/close.svg';\nimport income from '../../assets/income.svg';\nimport outcome from '../../assets/outcome.svg';\nimport { useTransactions } from '../../hooks/useTransactions';\n\ninterface Props {\n  isOpen: boolean;\n  onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({ isOpen, onRequestClose }:Props) {\n  const { createTransaction } = useTransactions();\n\n  const [type, setType] = useState<'deposit' | 'withdraw'>('deposit');\n  const [title, setTitle] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [category, setCategory] = useState('');\n\n  const handleCreateNewTransaction = async (event: FormEvent) => {\n    event.preventDefault();\n\n    const transaction = {\n      title,\n      amount,\n      category,\n      type,\n    };\n\n    await createTransaction(transaction);\n\n    setTitle('');\n    setType('deposit');\n    setAmount(0);\n    setCategory('');\n\n    onRequestClose();\n  };\n\n  return (\n    <ReactModal\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n      overlayClassName=\"react-modal-overlay\"\n      className=\"react-modal\"\n    >\n      <button type=\"button\" onClick={onRequestClose} className=\"react-modal-close\">\n        <img src={close} alt=\"Fechar modal\" />\n      </button>\n\n      <Container onSubmit={handleCreateNewTransaction}>\n\n        <h2>Cadastrar transação</h2>\n\n        <input type=\"text\" placeholder=\"Titulo\" value={title} onChange={(e) => setTitle(e.target.value)} />\n        <input type=\"number\" placeholder=\"Valor\" value={amount} onChange={(e) => setAmount(Number(e.target.value))} />\n        <input type=\"text\" placeholder=\"Categoria\" value={category} onChange={(e) => setCategory(e.target.value)} />\n\n        <TransactionTypeContainer>\n          <RadioBox type=\"button\" isActive={type === 'deposit'} activeColor=\"green\" onClick={() => setType('deposit')}>\n            <img src={income} alt=\"Entrada\" />\n            <span>Entrada</span>\n          </RadioBox>\n\n          <RadioBox type=\"button\" isActive={type === 'withdraw'} activeColor=\"red\" onClick={() => setType('withdraw')}>\n            <img src={outcome} alt=\"Saida\" />\n            <span>Saida</span>\n          </RadioBox>\n        </TransactionTypeContainer>\n\n        <button type=\"submit\">Cadastrar</button>\n      </Container>\n    </ReactModal>\n  );\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --red: #e52e4d;\n    --blue: #5429cc;\n    --blue-light: #6933ff;\n    --green: #33cc95;\n    \n    --text-title: #363f5f;\n    --text-body: #969cb3;\n\n    --background: #f0f2f5;\n    --shape: #ffffff;\n  }\n  \n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html {\n    @media (max-width: 1080px) {\n      font-size: 93.75%; // 15px\n      color: red;\n    }\n\n    @media (max-width: 720px) {\n      font-size: 87.5%; // 14px\n      color: blue;\n    }\n  }\n\n  body {\n    background: var(--background);\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, textarea, button {\n    font-family: Poppins, sans-serif;\n    font-weight: 400;\n  }\n  \n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  [disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  .react-modal-overlay {\n    background-color: rgba(0, 0, 0, 0.5);\n    \n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .react-modal {\n    width: 100%;\n    max-width: 576px;\n\n    background-color: var(--background);\n    padding: 3rem;\n    position: relative;\n\n    border-radius: 0.25rem;\n  }\n\n  .react-modal-close {\n    position: absolute;\n    top: 1.5rem;\n    right: 1.5rem;\n\n    border: 0;\n    background-color: transparent;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.8);\n    }\n  }\n`;\n","import { useState } from 'react';\nimport ReactModal from 'react-modal';\nimport { Dashboard } from './components/Dashboard';\nimport { Header } from './components/Header';\nimport { NewTransactionModal } from './components/NewTransactionModal';\nimport { TransactionsProvider } from './hooks/useTransactions';\nimport { GlobalStyle } from './styles/global';\n\nReactModal.setAppElement('#root');\n\nexport function App() {\n  const [isOpenNewTransactionModal, setIsOpenNewTransactionModal] = useState(false);\n\n  const handleCloseNewTransactionModal = () => {\n    setIsOpenNewTransactionModal(false);\n  };\n\n  const handleOpenNewTransactionModal = () => {\n    setIsOpenNewTransactionModal(true);\n  };\n  return (\n    <TransactionsProvider>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n      <Dashboard />\n      <NewTransactionModal\n        isOpen={isOpenNewTransactionModal}\n        onRequestClose={handleCloseNewTransactionModal}\n      />\n      <GlobalStyle />\n    </TransactionsProvider>\n  );\n}\n\nexport default App;\n","import { createServer, Model } from 'miragejs';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  routes() {\n    this.namespace = 'api';\n\n    this.get('/transactions', () => this.schema.all('transaction'));\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody);\n\n      return schema.create('transaction', data);\n    });\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}